spring:
  config:
    import: optional:file:.env[.properties]
  profiles:
    active: develop # local, develop, release

  # OAuth2
  security:
    oauth2:
      client:
        registration: # 클라이언트 식별
          # Google
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
          # Naver
          naver:
            client-name: Naver
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: ${NAVER_REDIRECT_URI}
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - name
              - email
          # Kakao
          kakao:
            client-name: Kakao
            client-id: ${KAKAO_CLIENT_ID}
            redirect-uri: ${KAKAO_REDIRECT_URI}
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - profile_nickname
              - account_email
              - profile_image
          github:
            client-name: GitHub
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            redirect-uri: ${GITHUB_REDIRECT_URI}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            scope:
              - read:user
              - user:email

        provider: # 서비스 제공자 식별
          # Naver
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          # Kakao
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: login

  # 파일
  servlet:
    multipart:
      maxFileSize: 30MB # 1개
      maxRequestSize: 100MB # 전체
---
spring:
  mail:
    host: smtp.gmail.com
    port: 587
    username: jyc0011211@gmail.com
    password: sszjsepwzuskkfns
    properties:
      mail:
        smtp:
          auth: true
          timeout: 5000
          starttls:
            enable: true
server:
  servlet:
    session:
      cookie:
        same-site: None
        secure: true

cors:
  allowed:
    origin: http://52.78.81.66:3000

api:
  base:
    url: ${API_URL}

# Swagger
springdoc:
  swagger-ui:
    path: /swagger
  cache:
    disabled: true
  use-fqn: true
---
# DB-JPA Global settig
spring:
  #MySQL
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
  sql:
    init:
      mode: never
  #JPA
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        use_sql_comments: true
        hbm2ddl:
          auto: update
        default_batch_fetch_size: 1000
---
# S3
cloud:
  aws:
    s3:
      bucketName: ${AWS_S3_BUCKET_NAME}
    credentials:
      accessKey: ${AWS_S3_ACCESS_KEY}
      secretKey: ${AWS_S3_SECRET_KEY}
    region:
      static: ap-northeast-2
    stack:
      auto: false
---
# Local
spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: ${LOCAL_DB_URL}
    username: ${LOCAL_DB_USERNAME}
    password: ${LOCAL_DB_PASSWORD}

---
# Develop
spring:
  config:
    activate:
      on-profile: develop
  datasource:
    url: ${AWS_DB_URL}
    username: ${AWS_DB_USERNAME}
    password: ${AWS_DB_PASSWORD}
  jpa:
    properties:
      hibernate:
        hbm2ddl:
          auto: update

---
# Release
spring:
  config:
    activate:
      on-profile: release
  datasource:
    url: ${AWS_DB_URL}
    username: ${AWS_DB_USERNAME}
    password: ${AWS_DB_PASSWORD}
  jpa:
    properties:
      hibernate:
        hbm2ddl:
          auto: create
---
spring:
  application:
    name: sanhak
